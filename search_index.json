[
["index.html", "About this Guide", " About this Guide Houston R Users are hosting a guided intro workshop on November 12, 2016. This guide is the full version of the short guide handed out at the workshop. This should be a good reference for reviewing things we covered in person, or for a self-guided introduction to R. "],
["welcome-to-intro-to-r.html", "1 Welcome to Intro to R 1.1 What is R? 1.2 The Plan", " 1 Welcome to Intro to R We are very excited you could make it to this Intro to R workshop! We hope to leave this workshop with some practical practice under our belts working with data in R and the ability to find and understand resources when applying these steps to our own datasets. 1.1 What is R? R is a programming language designed specifically for statistics! Because it is a free and open source language, many people have contributed to the R ecosystem. In addition to being very powerful and expressive for statistical analysis, R has become very popular for doing exploratory data visualization and report making as well. 1.2 The Plan Today, we are going to: Work interactively with a simple dataset Loading in the data Exploring it Calculating descriptive statistics Visualizing it Modeling it Practice making a script and a report with a larger dataset Loading in the data Exploring it Cleaning it Visualizing it Modeling it Making a report Explore and practice openly with a full dataset We will also cover how to get help and how to learn more about using R. While we will not be able to cover how to handle a wide variety of different datasets and visualizations, our mentors have a wide range of experiences with using R for energy data, bioinformatics, mapping, natural language processing, and much more! We hope to get to know you throughout the workshop and share domain specific experiences with you. "],
["interacting-with-simple-data.html", "2 Interacting with Simple Data 2.1 What is RStudio? 2.2 Coding in the console 2.3 Loading in data 2.4 Glancing at the data 2.5 Visualizing the data 2.6 Modeling the data 2.7 Working with a simple dataset", " 2 Interacting with Simple Data 2.1 What is RStudio? Today, we will be working with R in RStudio. While there are other programs we can use to write R, RStudio has become the standard environment for working with R. RStudio has four main windows: a file viewer, an interactive console, an environment viewer, and directory viewer. Let’s focus on the interactive console first. 2.2 Coding in the console Click in the interactive console. You’ll notice a cursor will start blinking next to the &gt; symbol. This is called the command prompt; the computer is waiting for us to give it a command; it’s “prompting” us, and letting us know it’s ready. Given that R was made for statistics, we should expect it to have no problems with numbers and math. Let’s try some basics! 1 ## [1] 1 1 + 5 ## [1] 6 10 + 12 ## [1] 22 Pressing enter after each line of code runs it, and R will tell us the answer right away. This lets us interact with R quickly. R, like other programming languages, can remember information we give it in named variables. This is called assigning variables with a value. Let’s tell R to remember some information for us. x &lt;- 1 y &lt;- 5 z &lt;- 10 The &lt; and - can be seen as an arrow pointing to the left. You can think of this as saying, “assign the value 1 to a variable named x”. If you are familiar with other programming languages, &lt;- and = can be used interchangably in R, but the preferred way is to use &lt;-. We can also see all the information we’ve told R to remember in the environment viewer. We can ask R what the values of these variables are: x ## [1] 1 y ## [1] 5 z ## [1] 10 We can also use these variables like so: x + y ## [1] 6 x + z ## [1] 11 z * y ## [1] 50 And if we try to ask R about a variable it doesn’t know about, R will tell us that it can’t find that variable: a ## Error in eval(expr, envir, enclos): object &#39;a&#39; not found This is neat and all, but we’re here to dig into data, so let’s get to it! 2.3 Loading in data We are going to load in CSV files today to get data into R. R is powerful for statistics because it has a great base collection of functions, or named procedures, for common things we’d want to do with data, like reading in a CSV. R’s base way of doing this is with a function named read.csv. Like the named variables, we can get what read.csv is by referring to its name. For more info on loading data, see here. read.csv ## function (file, header = TRUE, sep = &quot;,&quot;, quote = &quot;\\&quot;&quot;, dec = &quot;.&quot;, ## fill = TRUE, comment.char = &quot;&quot;, ...) ## read.table(file = file, header = header, sep = sep, quote = quote, ## dec = dec, fill = fill, comment.char = comment.char, ...) ## &lt;bytecode: 0x3d97350&gt; ## &lt;environment: namespace:utils&gt; Here, we get back just what read.csv is. In order to tell R to do or run the function, we need to run: read.csv() ## Error in read.table(file = file, header = header, sep = sep, quote = quote, : argument &quot;file&quot; is missing, with no default In order to know what file to read in, we need to give the function the location of the file: read.csv(file = &#39;crickets.csv&#39;) ## Chirpspersecond Temperature ## 1 20.0 88.6 ## 2 16.0 71.6 ## 3 19.8 93.3 ## 4 18.4 84.3 ## 5 17.1 80.6 ## 6 15.5 75.2 ## 7 14.7 69.7 ## 8 17.1 82.0 ## 9 15.4 69.4 ## 10 16.2 83.3 ## 11 15.0 79.6 ## 12 17.2 82.6 ## 13 16.0 80.6 ## 14 17.0 83.5 ## 15 14.4 76.3 RStudio reminds us what different functions are named as we start typing them into console, and reminds us what additional information each of those functions may need when we type the (. It also automatically completes the function call for us with the ). When we read in the CSV, R printed the data out to us. In order to really use the data though, we need to tell R to remember the data by assigning it to a variable. We want to name our variables so that they’re easy to remember and indicative of what information they are holding onto. crickets &lt;- read.csv(file = &#39;crickets.csv&#39;) Now, when we ask R about crickets, we get the data back! crickets ## Chirpspersecond Temperature ## 1 20.0 88.6 ## 2 16.0 71.6 ## 3 19.8 93.3 ## 4 18.4 84.3 ## 5 17.1 80.6 ## 6 15.5 75.2 ## 7 14.7 69.7 ## 8 17.1 82.0 ## 9 15.4 69.4 ## 10 16.2 83.3 ## 11 15.0 79.6 ## 12 17.2 82.6 ## 13 16.0 80.6 ## 14 17.0 83.5 ## 15 14.4 76.3 There are many other ways to load in data from other file types. Googling “read xls to R” will give us some great answers on how to read in data as an Excel sheet. We also have a quick list of standard ways to load other common file types in the appendix. Let’s get a quick sense of what this data is like! 2.4 Glancing at the data Here’s a table of some quick functions we can run on the data to learn about it: Code Description names(crickets) Column header names dim(crickets) Number of rows by number of columns nrow(crickets) Number of rows ncol(crickets) Number of columns str(crickets) Structure of data summary(crickets) Summary of the data View(crickets) View data in file viewer To learn more about any function, we can add a ? in front of the function name like this: ?str We can also look at parts of the data using []. For example, we can look at the value in the first row and column: crickets[1, 1] ## [1] 20 We can look at just specific rows: crickets[1, ] ## Chirpspersecond Temperature ## 1 20 88.6 crickets[2, ] ## Chirpspersecond Temperature ## 2 16 71.6 crickets[nrow(crickets), ] ## Chirpspersecond Temperature ## 15 14.4 76.3 or just specific columns: crickets[, 1] ## [1] 20.0 16.0 19.8 18.4 17.1 15.5 14.7 17.1 15.4 16.2 15.0 17.2 16.0 17.0 ## [15] 14.4 crickets[, 2] ## [1] 88.6 71.6 93.3 84.3 80.6 75.2 69.7 82.0 69.4 83.3 79.6 82.6 80.6 83.5 ## [15] 76.3 We can use this to calculate our own means, standard deviations, and medians: mean(crickets[, 1]) median(crickets[, 1]) sd(crickets[, 1]) mean(crickets[, 2]) median(crickets[, 2]) sd(crickets[, 2]) We can also ask R for the max and the min values: max(crickets[, 1]) min(crickets[, 1]) max(crickets[, 2]) min(crickets[, 2]) There’s many more calculations we can run on the data, but plotting the data will help us we a better picture of it. 2.5 Visualizing the data Base R can plot our data, but the wonderful thing about R being open-sourced is that it’s encouraged many people to expand it’s functionality by writing groups of functions, called packages. These packages are available for everyone to install and use. To plot our data, we will use an outside package, called ggplot2, which has become the standard way to plot data in R. We can install the ggplot2 package by calling the install.packages function like this: install.packages(&#39;ggplot2&#39;) ## Installing package into &#39;/home/travis/R/Library&#39; ## (as &#39;lib&#39; is unspecified) While the package is installing, let’s take a break! Once the package installed, we need to tell R to load it so we can use it. library(ggplot2) To start, we can tell ggplot what our data is: ggplot(data = crickets) This gives us back a rather boring blank gray square. At this point, ggplot does not know what about the data to map to where. We can tell it to map Chirpspersecond as the x, and Temperature as the y like this: ggplot(data = crickets, mapping = aes(x = Chirpspersecond, y = Temperature)) At this point, ggplot seems to know where things should go, but there’s no points. This base layer is ready with our coordinates and axis, but we would also like ggplot to map the data in the same way to a layer of markings that represent the data. Let’s try points: ggplot(data = crickets, mapping = aes(x = Chirpspersecond, y = Temperature)) + geom_point() We now have points, each with it’s x mapped to Chirpspersecond and the y mapped to Temperature. We can also mapped the color of each point to the temperature like this: ggplot(data = crickets, mapping = aes(x = Chirpspersecond, y = Temperature)) + geom_point(mapping = aes(color = Temperature)) This gives the points colors mapped from the Temperature along a default scale. We can adjust the scale to give a sense of the temperature like this: ggplot(data = crickets, mapping = aes(x = Chirpspersecond, y = Temperature)) + geom_point(mapping = aes(color = Temperature)) + scale_color_gradient(low = &quot;orange&quot;, high = &quot;red&quot;) Let’s take some time to experiment with different visualizations using ggplot2. See the data visualization cheat sheet for ideas. Once we have a plot we like, we can save our last plot to an image file very easily: ggsave(filename = &quot;plot.png&quot;) ## Saving 7 x 5 in image 2.6 Modeling the data From the plots, we see a potential correlation between Chirpspersecond and Temperature. If we were ever without our smart phones and thermometers, out in the country with some crickets, we might want to know if we can use the Chirpspersecond to calculate the Temperature. We can calculate the linear model for Temperature vs. Chirpspersecond using R’s lm function: lm(Temperature ~ Chirpspersecond, data = crickets) ## ## Call: ## lm(formula = Temperature ~ Chirpspersecond, data = crickets) ## ## Coefficients: ## (Intercept) Chirpspersecond ## 25.232 3.291 To calculate a linear model for Chirpspersecond from Temperature, we would do this: lm(Chirpspersecond ~ Temperature, data = crickets) ## ## Call: ## lm(formula = Chirpspersecond ~ Temperature, data = crickets) ## ## Coefficients: ## (Intercept) Temperature ## -0.3091 0.2119 There’s actually more information that lm tells us. Let’s take a look by first telling the computer the remember the result as a variable called crickets_lm. crickets_lm &lt;- lm(Temperature ~ Chirpspersecond, data = crickets) Then, if we type in crickets_lm$ and press tab, we see some suggestions for autocompletion. For example: crickets_lm$residuals ## 1 2 3 4 5 6 ## -2.4541979 -6.2898196 2.9040281 -1.4884407 -0.9100249 -1.0442738 ## 7 8 9 10 11 12 ## -3.9113976 0.4899767 -6.5151585 4.7519636 5.0012750 0.7608644 ## 13 14 15 ## 2.7101804 2.3190874 3.6759375 crickets_lm$coefficient tells us the slope and intercept. crickets_lm$coefficient ## (Intercept) Chirpspersecond ## 25.232305 3.291095 Let’s use crickets_lm$coefficient to add a line on top of our scatterplot so we can eyeball how our linear model fits. ggplot(data = crickets, mapping = aes(x = Chirpspersecond, y = Temperature)) + geom_point(mapping = aes(color = Temperature)) + scale_color_gradient(low = &quot;orange&quot;, high = &quot;red&quot;) + geom_abline(slope = crickets_lm$coefficient[2][1], intercept = crickets_lm$coefficient[1][1]) Additionally, cor and cor.test are two functions that can tell us about correlations between paired samples. As before, the ? can help us learn more: ?cor ?cor.test We can run these functions on our data by using crickets[,1] as the x, and crickets[,2] as the y like so: cor(x = crickets[,1], y = crickets[,2]) ## [1] 0.8351438 cor.test(x = crickets[,1], y = crickets[,2]) ## ## Pearson&#39;s product-moment correlation ## ## data: crickets[, 1] and crickets[, 2] ## t = 5.4745, df = 13, p-value = 0.0001067 ## alternative hypothesis: true correlation is not equal to 0 ## 95 percent confidence interval: ## 0.5642928 0.9436856 ## sample estimates: ## cor ## 0.8351438 2.7 Working with a simple dataset So far, we’ve: Loaded in the data from a csv crickets &lt;- read.csv(file = &#39;crickets.csv&#39;) Learned more about the data as a whole Code Description names(crickets) Column header names dim(crickets) Number of rows by number of columns nrow(crickets) Number of rows ncol(crickets) Number of columns str(crickets) Structure of data summary(crickets) Summary of the data View(crickets) View data in file viewer Looked at the data by rows and columns Code Description crickets[1,0] First row crickets[2,0] Second row crickets[,1] First column, Chirpspersecond crickets[,2] Second column, Temperature Calculated descriptive statistics on the data Code Description mean(crickets[,2]) Average Temperature median(crickets[,2]) Median Temperature sd(crickets[,2]) Standard deviation of Temperature max(crickets[,2]) Maximum Temperature min(crickets[,2]) Minimum Temperature Made plots of our data Applied statistical modelling to the data Code Description cor(crickets) cor.test(crickets) lm(crickets) Crickets is a rather small and well-formed dataset. Let’s practice our new skills on a slightly more realistic dataset and learn additional skills for cleaning the data and making a report. "],
["this-time-its-for-real.html", "3 This time it’s for real! 3.1 Loading and exploring a larger dataset 3.2 Counting missing values 3.3 Ignoring missing values 3.4 Imputing missing values 3.5 Visualizing the data using a script 3.6 Modeling the data 3.7 Making a reproducible report", " 3 This time it’s for real! Let’s pick up the pace and put our newfound skills to the test. For this section, we’re gonna use a dataset that looks more like what we’ll encounter in real life. It’s bigger in both dimensions; it has more rows but also more columns. It also has some missing data (oh noes!). Now things are getting real. 3.1 Loading and exploring a larger dataset We can load our new dataset the same way as before, using the read.csv() function. airquality &lt;- read.csv(&#39;airquality.csv&#39;) Let’s take a moment to explore the new dataset using tools we learned in the previous section. Try str, head, summary and get a good feel for the dataset. We can find the number of rows using nrow. nrow(airquality) ## [1] 153 3.2 Counting missing values I mentioned this dataset has some missing data, you may have noticed it already when exploring. In R, missing values are represented by the NA symbol. It’s always a good idea to check for missing values, even if you are sure your data is complete. We can ask R to tell us whether there are any NAs in the dataset using the is.na() function. is.na(airquality) ## Ozone Solar.R Wind Temp Month Dayhis will list out TRUE or FALSE for every value in new_data, for the question “is this value equal to NA?”. It’s kind hard to read, though. If we wanted to get a general sense of how many NAs there were in our entire dataset, we could do something like this: sum(is.na(airquality)) ## [1] 44 Notice how we nested one function inside another? There’s another way to do this. We can use the pipe operator, represented by the %&gt;% symbol, to achieve the same thing. airquality %&gt;% is.na() %&gt;% sum() ## [1] 44 3.3 Ignoring missing values If we try to call some descriptive statistics on any columns with NA values, we will get an ugly result. Let’s try getting the mean for Ozone levels. mean(airquality[, 1]) ## [1] NA Not what we were looking for. By default, many functions in R will return NA if called on a vector with any NA values inside. We can override this behavior by adding the na.rm = TRUE argument mean(airquality[, 1], na.rm = TRUE) ## [1] 42.12931 There are important questions to ask yourself when dealing with missing data, there’s no one-size-fits-all answer for it. A slapdash approach is to simply remove any rows with missing data. aircomplete &lt;- airquality[complete.cases(airquality), ] If you call nrow on aircomplete, you’ll see we have 111 rows now instead of the 153 we had before. nrow(aircomplete) ## [1] 111 3.4 Imputing missing values Another way to deal with missing data is to impute the values. In order to deal with missing data, you need to understand why it is missing in the first place. Is random data missing? Is it a function of how the data was collected? Were survey respondents hesitant to answer a question due to cultural or social norms? There are a number of techniques you can use to impute missing values. This is a relatively advanced topic that we will not cover in depth today. However, we will give you one method to impute values for the airquality data set. Here we will use the impute function from the Hmisc package to impute data using a predictive mean matching algorithm. require(Hmisc) ## Loading required package: Hmisc ## Loading required package: lattice ## Loading required package: survival ## Loading required package: Formula ## ## Attaching package: &#39;Hmisc&#39; ## The following objects are masked from &#39;package:base&#39;: ## ## format.pval, round.POSIXt, trunc.POSIXt, units airquality$Ozone &lt;- with(airquality, impute(Ozone, mean)) airquality$Solar.R &lt;- with(airquality, impute(Solar.R, mean)) Now that we’ve addressed missingness in our dataset, we’re ready to start analysis. 3.5 Visualizing the data using a script We can start by visualizing the data. We have more data to play with now, but let’s start with the same plot we used last time. plt &lt;- ggplot(aircomplete) + geom_point(aes(x=Temp, y=Ozone)) print(plt) You’ll notice two new things about what we did here. First, we assign the output to plt, this will be important when we want to make adjustments to the plot later. Second, you’ll notice when we do that, nothing appears; we have to print the plt to get it to show up. Now, I want you to go back and do everything we just did over again. What, you think that’s ridiculous? The reality is, we often have to go back and make changes upstream. When we do this, it can get very, very painful if we’re doing everything interactively, in the console. Before we move on, let’s introduce you to writing scripts. – Picture of RStudio window here, arrow pointing to New Script – Click the symbol for New Script and you’ll see RStudio’s built-in text editor pop up. Let’s take a moment to put all our work in. I know it’s a pain but it will pay off if we want to make changes later. require(ggplot2) airquality &lt;- read.csv(&#39;airquality.csv&#39;) aircomplete &lt;- airquality[complete.cases(airquality), ] plt &lt;- ggplot(aircomplete) + geom_point(aes(x=Temp, y=Ozone)) print(plt) We can run the entire script by clicking Source at the top of the editor pane. To run just a specific line or lines, you can select the section you want to run and then click Run Let’s get back to our data. You may have seen a pattern in the plot we made earlier. Let’s pick up our analysis with a little more visualization and some modeling. 3.6 Modeling the data We’ll model the data using the reliable lm() function again. Let’s add the following to the end of our script and Source it. ozone_model &lt;- lm(Ozone ~ Temp, data = aircomplete) print(summary(ozone_model)) ## ## Call: ## lm(formula = Ozone ~ Temp, data = aircomplete) ## ## Residuals: ## Min 1Q Median 3Q Max ## -40.922 -17.459 -0.874 10.444 118.078 ## ## Coefficients: ## Estimate Std. Error t value Pr(&gt;|t|) ## (Intercept) -147.6461 18.7553 -7.872 2.76e-12 *** ## Temp 2.4391 0.2393 10.192 &lt; 2e-16 *** ## --- ## Signif. codes: 0 &#39;***&#39; 0.001 &#39;**&#39; 0.01 &#39;*&#39; 0.05 &#39;.&#39; 0.1 &#39; &#39; 1 ## ## Residual standard error: 23.92 on 109 degrees of freedom ## Multiple R-squared: 0.488, Adjusted R-squared: 0.4833 ## F-statistic: 103.9 on 1 and 109 DF, p-value: &lt; 2.2e-16 Our model tells us there is a statistically significant relationship between Ozone and Temperature. If we want to add the linear model to our plot, we can use the geom_abline() function. geom_abline() takes two arguments, the intercept and slope. We can use the coef() function to extract those values from the model. Add the following lines to your script and Source it. coef(ozone_model) ## (Intercept) Temp ## -147.64607 2.43911 With that info, we’re ready to add our linear model. Add the following lines to your script and Source it. plt_2 &lt;- plt + geom_abline(intercept = -147.64607 , slope = 2.43911) print(plt_2) 3.7 Making a reproducible report Great. Now, what if we want to make a report of our work? With R, you get the power of knitr, which will knit your work together into a report. Let’s try it on our current script. Go to File -&gt; Knit Document, name the file airquality_report and select HTML, then watch the magic happen! – example of switching out the data set and generating a new report here? – "],
["time-to-start-exploring-the-data.html", "4 Time to start exploring the data! 4.1 R Graphics", " 4 Time to start exploring the data! So far we’ve loaded the dataset, we’ve done some high level exploration of the structure, cleaned up the data and even created a simple linear model. In most projects, this will be the hardest part. Once you have your data loaded and cleaned, a common next step is to use R’s powerful graphics packages to create some exploratory graphics to help you visualize the dataset. 4.1 R Graphics R has a few graphics packages to choose from. Many useful plots come ‘out of the box’ in R. For example, if we want to see a scatterplot matrix of all the data columns in the airquality dataset, we could use the pairs funtion. pairs(airquality) While the basic package is nice, we will be using ggplot2 today. It is a powerful graphics package that is designed to make your plots adaptable, scalable, and easy to produce. It is a very popular graphics package used by a large number of R users worldwide. Many times, it’s helpful to just do a scatterplot of two variables p &lt;- ggplot(airquality, aes(Ozone, Solar.R)) + geom_point() p ## Warning: Removed 42 rows containing missing values (geom_point). "],
["section.html", "5 ", " 5 "],
["exploring-further.html", "6 Exploring further", " 6 Exploring further "],
["learning-more.html", "7 Learning More 7.1 Next Steps 7.2 Getting Practice 7.3 Getting Help 7.4 Staying up to date", " 7 Learning More There are many ways to continue learning R. No matter what you choose to be your next step, we’re here and eager to share experiences and questions! Join us in person for our Houston R UseRs Meetups or online in our Slack chat anytime. 7.1 Next Steps The following resources are great next steps to take for learning more on using R after this workshop. 7.1.1 R for Data Science This book penned by Hadley Wickham and Garrett Grolemund covers modern standards on using R for data science with a cohesive and conversational narrative. The book covers in more detail some topics we touched on during this workshop for: Getting your data into R Cleaning your data Exploring your data by transforming, visualizing, and modeling Creating reproducible reports For a great overview of what’s in the book, check out this page. With R and RStudio setup on your computer, you are ready to start using this book right away. 7.1.2 Read other people’s scripts Kaggle Titantic examples Gettings started in R Exploring Survival on the Titanic R by example 7.1.3 Data Camp 7.1.4 How to learn R 7.2 Getting Practice 7.2.1 Houston data jams 7.2.2 Kaggle 7.2.3 drivendata 7.3 Getting Help 7.3.1 Houston R UseRs Slack and Meetup 7.3.2 Stack Overflow 7.4 Staying up to date 7.4.1 RWeekly 7.4.2 Awesome-R "],
["installation-instructions.html", "8 Installation Instructions 8.1 Installing R on Mac OS X 8.2 Installing R on Windows", " 8 Installation Instructions 8.1 Installing R on Mac OS X 8.1.1 Installing R with Homebrew If you are not sure if you have Homebrew, open your Terminal or CLI and type which brew. If you get output like this: /usr/local/bin/brew, then you have Homebrew and you are good to go. Otherwise, if you get: command not found, you’ll need to install it from here: http://brew.sh/. After confirming you have Homebrew, proceed with instructions: Open Terminal. Before installing anything, run brew update &amp;&amp; brew upgrade Copy/paste the comands below to install R: $ brew tap caskroom/cask $ brew install homebrew/completions/brew-cask-completion $ brew install Caskroom/cask/xquartz $ brew cask install java $ brew tap homebrew/science $ brew install R Trouble Shooting … 8.2 Installing R on Windows "]
]
